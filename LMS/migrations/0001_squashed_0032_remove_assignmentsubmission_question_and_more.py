# Generated by Django 5.1.3 on 2024-12-28 06:28

import django.contrib.auth.models
import django.contrib.auth.validators
import django.db.models.deletion
import django.utils.timezone
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    replaces = [
        ("LMS", "0001_initial"),
        ("LMS", "0002_remove_user_role_userprofile"),
        ("LMS", "0003_user_role_delete_userprofile"),
        ("LMS", "0004_alter_course_options_and_more"),
        ("LMS", "0005_remove_course_slug"),
        ("LMS", "0006_alter_course_is_published"),
        ("LMS", "0007_alter_course_is_free"),
        ("LMS", "0008_alter_assignment_options_and_more"),
        ("LMS", "0009_alter_lesson_order"),
        ("LMS", "0010_alter_lesson_title"),
        ("LMS", "0011_alter_lesson_content"),
        ("LMS", "0012_alter_lesson_content_alter_lesson_title"),
        ("LMS", "0013_alter_assignment_course"),
        ("LMS", "0014_user_grade"),
        ("LMS", "0015_alter_user_grade"),
        ("LMS", "0016_user_courses_purchased"),
        ("LMS", "0017_alter_course_is_free"),
        ("LMS", "0018_lesson_instructor"),
        ("LMS", "0019_course_enrolled_students"),
        ("LMS", "0020_userprogress"),
        ("LMS", "0021_remove_course_difficulty_level"),
        ("LMS", "0022_mediafile_video_remove_lesson_media_file_and_more"),
        ("LMS", "0023_alter_mediafile_file"),
        ("LMS", "0024_remove_question_difficulty_level_and_more"),
        ("LMS", "0025_alter_useranswer_options_alter_useranswer_question_and_more"),
        ("LMS", "0026_assignment_question"),
        ("LMS", "0027_userprogress_completed_lessons"),
        ("LMS", "0028_assignmentsubmission_is_correct_and_more"),
        ("LMS", "0029_rename_is_correct_assignmentsubmission_correct"),
        ("LMS", "0030_rename_correct_assignmentsubmission_is_correct_and_more"),
        ("LMS", "0031_remove_assignmentsubmission_is_correct"),
        ("LMS", "0032_remove_assignmentsubmission_question_and_more"),
    ]

    initial = True

    dependencies = [
        ("auth", "0012_alter_user_first_name_max_length"),
    ]

    operations = [
        migrations.CreateModel(
            name="Course",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("title", models.CharField(max_length=200)),
                ("description", models.TextField()),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
            ],
        ),
        migrations.CreateModel(
            name="Question",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("question_text", models.TextField()),
                (
                    "question_type",
                    models.CharField(
                        choices=[("mcq", "Multiple Choice"), ("text", "Text")],
                        max_length=20,
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name="Assignment",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("title", models.CharField(max_length=200)),
                ("description", models.TextField()),
                ("due_date", models.DateTimeField()),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                (
                    "course",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="assignments",
                        to="LMS.course",
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name="Lesson",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("title", models.CharField(max_length=200)),
                ("content", models.TextField()),
                ("order", models.PositiveIntegerField()),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                (
                    "course",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="lessons",
                        to="LMS.course",
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name="Choice",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("choice_text", models.CharField(max_length=200)),
                ("is_correct", models.BooleanField(default=False)),
                (
                    "question",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="choices",
                        to="LMS.question",
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name="Quiz",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("title", models.CharField(max_length=200)),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                (
                    "course",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="quizzes",
                        to="LMS.course",
                    ),
                ),
            ],
        ),
        migrations.AddField(
            model_name="question",
            name="quiz",
            field=models.ForeignKey(
                on_delete=django.db.models.deletion.CASCADE,
                related_name="questions",
                to="LMS.quiz",
            ),
        ),
        migrations.CreateModel(
            name="User",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("password", models.CharField(max_length=128, verbose_name="password")),
                (
                    "last_login",
                    models.DateTimeField(
                        blank=True, null=True, verbose_name="last login"
                    ),
                ),
                (
                    "is_superuser",
                    models.BooleanField(
                        default=False,
                        help_text="Designates that this user has all permissions without explicitly assigning them.",
                        verbose_name="superuser status",
                    ),
                ),
                (
                    "username",
                    models.CharField(
                        error_messages={
                            "unique": "A user with that username already exists."
                        },
                        help_text="Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.",
                        max_length=150,
                        unique=True,
                        validators=[
                            django.contrib.auth.validators.UnicodeUsernameValidator()
                        ],
                        verbose_name="username",
                    ),
                ),
                (
                    "first_name",
                    models.CharField(
                        blank=True, max_length=150, verbose_name="first name"
                    ),
                ),
                (
                    "last_name",
                    models.CharField(
                        blank=True, max_length=150, verbose_name="last name"
                    ),
                ),
                (
                    "email",
                    models.EmailField(
                        blank=True, max_length=254, verbose_name="email address"
                    ),
                ),
                (
                    "is_staff",
                    models.BooleanField(
                        default=False,
                        help_text="Designates whether the user can log into this admin site.",
                        verbose_name="staff status",
                    ),
                ),
                (
                    "is_active",
                    models.BooleanField(
                        default=True,
                        help_text="Designates whether this user should be treated as active. Unselect this instead of deleting accounts.",
                        verbose_name="active",
                    ),
                ),
                (
                    "date_joined",
                    models.DateTimeField(
                        default=django.utils.timezone.now, verbose_name="date joined"
                    ),
                ),
                (
                    "groups",
                    models.ManyToManyField(
                        blank=True,
                        help_text="The groups this user belongs to.",
                        related_name="custom_user_set",
                        to="auth.group",
                        verbose_name="groups",
                    ),
                ),
                (
                    "user_permissions",
                    models.ManyToManyField(
                        blank=True,
                        help_text="Specific permissions for this user.",
                        related_name="custom_user_permissions_set",
                        to="auth.permission",
                        verbose_name="user permissions",
                    ),
                ),
                (
                    "role",
                    models.CharField(
                        choices=[
                            ("student", "Student"),
                            ("instructor", "Instructor"),
                            ("admin", "Admin"),
                        ],
                        default="student",
                        max_length=10,
                    ),
                ),
            ],
            options={
                "verbose_name": "user",
                "verbose_name_plural": "users",
                "abstract": False,
            },
            managers=[
                ("objects", django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name="QuizAttempt",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "score",
                    models.DecimalField(
                        blank=True, decimal_places=2, max_digits=5, null=True
                    ),
                ),
                ("completed_at", models.DateTimeField(auto_now_add=True)),
                (
                    "quiz",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="attempts",
                        to="LMS.quiz",
                    ),
                ),
                (
                    "student",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="quiz_attempts",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name="Enrollment",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("enrollment_date", models.DateTimeField(auto_now_add=True)),
                (
                    "course",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE, to="LMS.course"
                    ),
                ),
                (
                    "student",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                (
                    "completion_date",
                    models.DateTimeField(
                        blank=True, help_text="Date of course completion", null=True
                    ),
                ),
                (
                    "feedback",
                    models.TextField(
                        blank=True,
                        help_text="Optional feedback from the student",
                        null=True,
                    ),
                ),
                (
                    "progress",
                    models.DecimalField(
                        decimal_places=2,
                        default=0.0,
                        help_text="Completion percentage",
                        max_digits=5,
                    ),
                ),
                (
                    "status",
                    models.CharField(
                        choices=[
                            ("active", "Active"),
                            ("completed", "Completed"),
                            ("dropped", "Dropped"),
                        ],
                        default="active",
                        max_length=10,
                    ),
                ),
            ],
        ),
        migrations.AddField(
            model_name="course",
            name="instructor",
            field=models.ManyToManyField(
                limit_choices_to={"role": "instructor"},
                related_name="courses_as_instructor",
                to=settings.AUTH_USER_MODEL,
            ),
        ),
        migrations.AddField(
            model_name="course",
            name="students",
            field=models.ManyToManyField(
                related_name="courses_as_student",
                through="LMS.Enrollment",
                to=settings.AUTH_USER_MODEL,
            ),
        ),
        migrations.CreateModel(
            name="AssignmentSubmission",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("submission_file", models.FileField(upload_to="assignments/")),
                (
                    "grade",
                    models.DecimalField(
                        blank=True, decimal_places=2, max_digits=5, null=True
                    ),
                ),
                ("feedback", models.TextField(blank=True, null=True)),
                ("submitted_at", models.DateTimeField(auto_now_add=True)),
                (
                    "assignment",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="submissions",
                        to="LMS.assignment",
                    ),
                ),
                (
                    "student",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="submissions",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
        ),
        migrations.AlterModelOptions(
            name="course",
            options={"ordering": ["-created_at"]},
        ),
        migrations.AddField(
            model_name="course",
            name="difficulty_level",
            field=models.CharField(
                choices=[
                    ("beginner", "Beginner"),
                    ("intermediate", "Intermediate"),
                    ("advanced", "Advanced"),
                ],
                default="beginner",
                max_length=15,
            ),
        ),
        migrations.AddField(
            model_name="course",
            name="is_deleted",
            field=models.BooleanField(
                default=False, help_text="Mark as true to archive the course"
            ),
        ),
        migrations.AddField(
            model_name="course",
            name="is_free",
            field=models.BooleanField(default=False),
        ),
        migrations.AddField(
            model_name="course",
            name="is_published",
            field=models.BooleanField(
                default=False,
                help_text="Set to true when the course is ready for students",
            ),
        ),
        migrations.AddField(
            model_name="course",
            name="objectives",
            field=models.TextField(
                blank=True, help_text="Key objectives of the course", null=True
            ),
        ),
        migrations.AddField(
            model_name="course",
            name="price",
            field=models.DecimalField(
                blank=True, decimal_places=2, max_digits=8, null=True
            ),
        ),
        migrations.AddField(
            model_name="course",
            name="slug",
            field=models.SlugField(
                blank=True,
                help_text="URL-friendly identifier for the course",
                unique=True,
            ),
        ),
        migrations.AddField(
            model_name="course",
            name="thumbnail",
            field=models.ImageField(
                blank=True, null=True, upload_to="course_thumbnails/"
            ),
        ),
        migrations.AddField(
            model_name="course",
            name="video_intro",
            field=models.FileField(blank=True, null=True, upload_to="course_videos/"),
        ),
        migrations.AlterField(
            model_name="course",
            name="title",
            field=models.CharField(max_length=200, unique=True),
        ),
        migrations.AlterField(
            model_name="enrollment",
            name="course",
            field=models.ForeignKey(
                on_delete=django.db.models.deletion.CASCADE,
                related_name="enrollments",
                to="LMS.course",
            ),
        ),
        migrations.AlterField(
            model_name="enrollment",
            name="student",
            field=models.ForeignKey(
                on_delete=django.db.models.deletion.CASCADE,
                related_name="enrollments",
                to=settings.AUTH_USER_MODEL,
            ),
        ),
        migrations.AddConstraint(
            model_name="enrollment",
            constraint=models.UniqueConstraint(
                fields=("student", "course"), name="unique_enrollment"
            ),
        ),
        migrations.RemoveField(
            model_name="course",
            name="slug",
        ),
        migrations.AlterField(
            model_name="course",
            name="is_published",
            field=models.BooleanField(
                default=True,
                help_text="Set to true when the course is ready for students",
            ),
        ),
        migrations.AlterField(
            model_name="course",
            name="is_free",
            field=models.BooleanField(default=False),
        ),
        migrations.AlterModelOptions(
            name="assignment",
            options={"ordering": ["due_date"]},
        ),
        migrations.AlterModelOptions(
            name="assignmentsubmission",
            options={"ordering": ["submitted_at"]},
        ),
        migrations.AlterModelOptions(
            name="lesson",
            options={"ordering": ["order"]},
        ),
        migrations.AlterModelOptions(
            name="quiz",
            options={"ordering": ["-created_at"]},
        ),
        migrations.AlterModelOptions(
            name="quizattempt",
            options={"ordering": ["-completed_at"]},
        ),
        migrations.AddField(
            model_name="assignment",
            name="feedback",
            field=models.TextField(blank=True, null=True),
        ),
        migrations.AddField(
            model_name="assignment",
            name="file",
            field=models.FileField(blank=True, null=True, upload_to="assignments/"),
        ),
        migrations.AddField(
            model_name="assignment",
            name="is_deleted",
            field=models.BooleanField(default=False),
        ),
        migrations.AddField(
            model_name="assignment",
            name="is_graded",
            field=models.BooleanField(default=False),
        ),
        migrations.AddField(
            model_name="assignment",
            name="is_published",
            field=models.BooleanField(default=True),
        ),
        migrations.AddField(
            model_name="assignment",
            name="max_grade",
            field=models.DecimalField(decimal_places=2, default=0, max_digits=5),
        ),
        migrations.AddField(
            model_name="assignment",
            name="prerequisite_assignments",
            field=models.ManyToManyField(
                blank=True, related_name="next_assignments", to="LMS.assignment"
            ),
        ),
        migrations.AddField(
            model_name="assignment",
            name="students_submitted",
            field=models.ManyToManyField(
                blank=True,
                related_name="submitted_assignments",
                to=settings.AUTH_USER_MODEL,
            ),
        ),
        migrations.AddField(
            model_name="assignment",
            name="updated_at",
            field=models.DateTimeField(auto_now=True),
        ),
        migrations.AddField(
            model_name="lesson",
            name="duration",
            field=models.PositiveIntegerField(
                blank=True, help_text="Duration in minutes", null=True
            ),
        ),
        migrations.AddField(
            model_name="lesson",
            name="is_deleted",
            field=models.BooleanField(default=False),
        ),
        migrations.AddField(
            model_name="lesson",
            name="is_published",
            field=models.BooleanField(default=True),
        ),
        migrations.AddField(
            model_name="lesson",
            name="prerequisite_lessons",
            field=models.ManyToManyField(
                blank=True, related_name="next_lessons", to="LMS.lesson"
            ),
        ),
        migrations.AddField(
            model_name="lesson",
            name="updated_at",
            field=models.DateTimeField(auto_now=True),
        ),
        migrations.AddField(
            model_name="quiz",
            name="passing_score",
            field=models.DecimalField(
                blank=True,
                decimal_places=2,
                help_text="Score required to pass",
                max_digits=5,
                null=True,
            ),
        ),
        migrations.AddField(
            model_name="quiz",
            name="time_limit",
            field=models.DurationField(
                blank=True, help_text="Time limit for the quiz", null=True
            ),
        ),
        migrations.AddField(
            model_name="quizattempt",
            name="status",
            field=models.CharField(
                choices=[
                    ("in_progress", "In Progress"),
                    ("completed", "Completed"),
                    ("timed_out", "Timed Out"),
                ],
                default="in_progress",
                max_length=20,
            ),
        ),
        migrations.AddField(
            model_name="quizattempt",
            name="time_taken",
            field=models.DurationField(blank=True, null=True),
        ),
        migrations.AlterField(
            model_name="course",
            name="description",
            field=models.TextField(help_text="Brief description of the course"),
        ),
        migrations.AlterField(
            model_name="quizattempt",
            name="completed_at",
            field=models.DateTimeField(blank=True, null=True),
        ),
        migrations.AlterField(
            model_name="lesson",
            name="order",
            field=models.PositiveIntegerField(default=1),
        ),
        migrations.AlterField(
            model_name="lesson",
            name="content",
            field=models.TextField(default=0),
            preserve_default=False,
        ),
        migrations.AlterField(
            model_name="lesson",
            name="title",
            field=models.CharField(max_length=200),
        ),
        migrations.AlterField(
            model_name="assignment",
            name="course",
            field=models.ForeignKey(
                on_delete=django.db.models.deletion.CASCADE,
                related_name="assignments",
                to="LMS.lesson",
            ),
        ),
        migrations.AddField(
            model_name="user",
            name="grade",
            field=models.FloatField(
                blank=True, default=0, help_text="Grade for the student", null=True
            ),
        ),
        migrations.AddField(
            model_name="user",
            name="courses_purchased",
            field=models.ManyToManyField(
                blank=True, related_name="purchased_courses", to="LMS.course"
            ),
        ),
        migrations.AddField(
            model_name="lesson",
            name="instructor",
            field=models.ManyToManyField(
                limit_choices_to={"role": "instructor"},
                related_name="lessons_as_instructor",
                to=settings.AUTH_USER_MODEL,
            ),
        ),
        migrations.AddField(
            model_name="course",
            name="enrolled_students",
            field=models.ManyToManyField(
                blank=True,
                related_name="enrolled_students",
                to=settings.AUTH_USER_MODEL,
            ),
        ),
        migrations.CreateModel(
            name="UserProgress",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "progress",
                    models.DecimalField(decimal_places=2, default=0, max_digits=5),
                ),
                ("last_accessed", models.DateTimeField(auto_now=True)),
                (
                    "course",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE, to="LMS.course"
                    ),
                ),
                (
                    "user",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
        ),
        migrations.RemoveField(
            model_name="course",
            name="difficulty_level",
        ),
        migrations.CreateModel(
            name="MediaFile",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("file", models.FileField(upload_to="lesson_media/")),
            ],
        ),
        migrations.CreateModel(
            name="Video",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("url", models.URLField()),
            ],
        ),
        migrations.AddField(
            model_name="lesson",
            name="media_file",
            field=models.ManyToManyField(blank=True, to="LMS.mediafile"),
        ),
        migrations.AddField(
            model_name="lesson",
            name="video_url",
            field=models.ManyToManyField(blank=True, to="LMS.video"),
        ),
        migrations.RemoveField(
            model_name="question",
            name="question_type",
        ),
        migrations.RemoveField(
            model_name="question",
            name="quiz",
        ),
        migrations.AddField(
            model_name="assignment",
            name="lesson",
            field=models.ForeignKey(
                blank=True,
                null=True,
                on_delete=django.db.models.deletion.CASCADE,
                related_name="lesson_assignments",
                to="LMS.lesson",
            ),
        ),
        migrations.AddField(
            model_name="question",
            name="assignment",
            field=models.ForeignKey(
                default=1,
                on_delete=django.db.models.deletion.CASCADE,
                related_name="questions",
                to="LMS.assignment",
            ),
        ),
        migrations.AddField(
            model_name="question",
            name="is_true",
            field=models.BooleanField(default=False),
        ),
        migrations.AlterField(
            model_name="assignment",
            name="course",
            field=models.ForeignKey(
                on_delete=django.db.models.deletion.CASCADE,
                related_name="assignments",
                to="LMS.course",
            ),
        ),
        migrations.CreateModel(
            name="UserAnswer",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("is_correct", models.BooleanField()),
                ("submitted_answer", models.BooleanField()),
                ("submitted_at", models.DateTimeField(auto_now_add=True)),
                (
                    "question",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="user_answers",
                        to="LMS.question",
                    ),
                ),
                (
                    "user",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="answers",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
            options={
                "ordering": ["submitted_at"],
                "unique_together": {("user", "question")},
            },
        ),
        migrations.DeleteModel(
            name="Choice",
        ),
        migrations.AddField(
            model_name="assignment",
            name="question",
            field=models.ManyToManyField(
                blank=True, related_name="assignments", to="LMS.question"
            ),
        ),
        migrations.DeleteModel(
            name="UserAnswer",
        ),
        migrations.AddField(
            model_name="assignmentsubmission",
            name="is_correct",
            field=models.BooleanField(default=1),
            preserve_default=False,
        ),
        migrations.CreateModel(
            name="UserAnswer",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("submitted_answer", models.BooleanField()),
                ("is_correct", models.BooleanField()),
                ("submitted_at", models.DateTimeField(auto_now_add=True)),
                (
                    "question",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="user_answers",
                        to="LMS.question",
                    ),
                ),
                (
                    "user",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="answers",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
            options={
                "ordering": ["submitted_at"],
                "unique_together": {("user", "question")},
            },
        ),
    ]
